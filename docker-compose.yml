# PGVectorRAGIndexer Docker Compose Configuration
# 
# For production deployment, use the automated scripts:
#   Linux/macOS/WSL: curl -fsSL https://raw.githubusercontent.com/valginer0/PGVectorRAGIndexer/main/docker-run.sh | bash
#   Windows: See WINDOWS_SETUP.md
#
# For development, create a .env file with:
#   POSTGRES_USER=rag_user
#   POSTGRES_PASSWORD=rag_password
#   POSTGRES_DB=rag_vector_db
#   API_HOST=0.0.0.0
#   API_PORT=8000

services:
  # PostgreSQL database with pgvector extension
  db:
    image: pgvector/pgvector:pg16
    container_name: vector_rag_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-rag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rag_password}
      POSTGRES_DB: ${POSTGRES_DB:-rag_vector_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rag_user} -d ${POSTGRES_DB:-rag_vector_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag_network

  # PGVectorRAGIndexer application
  app:
    image: ${APP_IMAGE:-ghcr.io/valginer0/pgvectorragindexer:latest}
    container_name: vector_rag_app
    restart: always
    environment:
      DB_HOST: db
      DB_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-rag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-rag_password}
      POSTGRES_DB: ${POSTGRES_DB:-rag_vector_db}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./documents:/app/documents
      - model_cache:/root/.cache/huggingface
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rag_network

volumes:
  postgres_data:
  model_cache:

networks:
  rag_network: